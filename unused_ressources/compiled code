import processing.sound.*;

/* ______________________________FLAPPYMULTI______________________________ */

//Authors : Noah Buisson, Benoit Busnardo, Gaspard Hedde, ClÃ©ment Michellod 

/* ______________________________________________________________________ */

PImage backgroundImg, pipeTopImg, pipeBottomImg, groundImg, backgroundEasyImg, backgroundMediumImg, backgroundHardImg, pipeTopEasyImg, pipeTopMediumImg, pipeTopHardImg, pipeBottomEasyImg, pipeBottomMediumImg, pipeBottomHardImg, groundEasyImg, groundMediumImg, groundHardImg, iconImg, scoreImg, restartImg, restartSelectedImg, menuImg, menuSelectedImg, soundOnImg, soundOffImg, soundOnSelectedImg, soundOffSelectedImg, playImg, playSelectedImg, easyImg, mediumImg, hardImg, easySelectedImg, mediumSelectedImg, hardSelectedImg, leftArrowImg, rightArrowImg, musicOnImg, musicOffImg, musicOnSelectedImg, musicOffSelectedImg, settingsImg, settingsSelectedImg, confirmImg, confirmSelectedImg, p1Img, p2Img, p3Img, p4Img, p1SelectedImg, p2SelectedImg, p3SelectedImg, p4SelectedImg, easyScreenImg, mediumScreenImg, hardScreenImg;
SoundFile flapSound, hitSound, scoreSound, wooshSound, themeSound;
PFont textFont, numbersFont;
color mainColor, highscoreColor;

float minRotation, maxRotation, minYVertical, maxYVertical, textOpacity;
int game, title, menu, settings, easyHighscore, hardHighscore, mediumHighscore, groundX, pipeGap, difficulty, pipesAppearWidth, pipesAppearGap, pipeGroundGap, startTime, elapsedTime, getReadyTime, groundColisionY, topColisionY, gameOverSelectedButton, menuSelectedButton, settingsSelectedButton, gameOverButtonsCount, menuButtonsCount, settingsButtonsCount, flapSoundTimeout, wooshSoundTimeout, highscoreTimeout;
int[] pipesX, pipesY;
boolean drawLastFrame, showText, playingTheme, playingFlapSound, playingWooshSound, nextPipeIsHigh, sound, music;

/* ___RELATED TO PLAYERS___ */

PImage[] playersImg;
color[] playersColor;

float[] playersRotationAngle;
int[] playersX, playersY, playersYVelocity, playersDeadX, playersScore, playersScoreboardX, playersScoreboardY, playersScoreY, playersKeyY;
boolean[] players, playersDead, playersIsDying;
boolean[][] playersPipesScored;

String[] playersKey, highscores;

/* ___SETUP___ */
void setup() {
  fullScreen();

  // Window icon and title
  iconImg = loadImage("assets/images/icon.png");  
  surface.setIcon(iconImg);
  surface.setTitle("FlappyMulti - A multiplayer Flappy Bird Game");

  settings = gameOverSelectedButton = settingsSelectedButton = 0;
  drawLastFrame = playingTheme = playingFlapSound = false;
  menu = title = 1;
  gameOverButtonsCount = 2;
  settingsButtonsCount = menuSelectedButton = 3;
  difficulty = menuButtonsCount = 4;

  /* ___LOAD HIGHSCORES FROM FILE___ */
  highscores = loadStrings("highscores.txt");
  easyHighscore = int(highscores[0]);
  mediumHighscore = int(highscores[1]);
  hardHighscore = int(highscores[2]);

  playersX = new int[4];
  playersY = new int[4];
  playersYVelocity = new int[4];
  playersScore = new int[4];
  playersDeadX = new int[4];
  playersKeyY = new int[4];

  /* ___PLAYERS___ */
  playersImg = new PImage[4];
  players = new boolean[4];
  playersDead = new boolean[4];
  playersIsDying = new boolean[4];

  players[0] = true;
  players[1] = players[2] = players[3] = false;

  playersDead[0] = false;
  playersDead[1] = playersDead[2] = playersDead[3] = true;

  playersIsDying[0] = false;
  playersIsDying[1] = playersIsDying[2] = playersIsDying[3] = true;

  /* ___PLAYERS COLORS___ */
  playersColor = new color[4];

  playersColor[0] = color(254, 196, 0);
  playersColor[1] = color(55, 198, 67);
  playersColor[2] = color(55, 127, 190);
  playersColor[3] = color(234, 112, 69);

  /* ___PLAYERS KEY___ */
  playersKey = new String[4];

  playersKey[0] = "left click";
  playersKey[1] = "right click";
  playersKey[2] = "press up arrow";
  playersKey[3] = "press z";

  playersKeyY[0] = playersKeyY[2] = height/2-200;
  playersKeyY[1] = playersKeyY[3] = height/2-50;

  /* ___PLAYERS SCORES___ */
  playersScoreboardY = new int[4];
  playersScoreboardX = new int[4];
  playersScoreY = new int[4];

  playersScoreboardX[0] = width/2+215;
  playersScoreboardX[1] = width/2+140;
  playersScoreboardX[2] = width/2+65;
  playersScoreboardX[3] = width/2-10;

  playersScoreboardY[0] = playersScoreboardY[1] = playersScoreboardY[2] = playersScoreboardY[3] = height/2-32;

  playersScoreY[0] = 100;
  playersScoreY[1] = 200;
  playersScoreY[2] = 300;
  playersScoreY[3] = 400;

  /* ___INITIALISE SOUNDS TIMEOUTS___ */
  getReadyTime = 1000;
  flapSoundTimeout = highscoreTimeout = wooshSoundTimeout = millis();

  /* ___COLISIONS FOR PLAYERS___ */
  groundColisionY = height-160;
  topColisionY = 35;

  /* ___ROTATIONS FOR PLAYERS___ */
  playersRotationAngle = new float[4];
  minYVertical = -18;
  maxYVertical = 18;
  minRotation = -PI/4;
  maxRotation = PI/4;

  /* ___PIPE SPAWN GAPS___ */
  pipesAppearGap = 200;
  pipeGroundGap = 50;
  pipesAppearWidth = width+pipesAppearGap;

  /* ___COLORS___ */
  mainColor = color(255, 255, 255);

  /* ___DEFINE IMAGES___ */
  loadImages();

  backgroundImg = backgroundEasyImg;
  groundImg = groundEasyImg;
  pipeTopImg = pipeTopEasyImg;
  pipeBottomImg = pipeBottomEasyImg;

  /* ___DEFINE SOUNDS___ */
  loadSounds();

  sound = true;
  music = true;

  if (music) {
    if (!playingTheme) {
      themeSound.loop();
      playingTheme = true;
    }
  }
  

  /* ___DEFINE FONTS___ */
  textFont = createFont("assets/fonts/text.otf", 32);
  numbersFont = createFont("assets/fonts/numbers.ttf", 32);
  textSize(40);
  textFont(textFont);

  fill(255,255,255);
}

/* ___DRAW___ */
void draw() {
  /* ___IF GAME IS ON___ */
  if(game == 1) {
    /* ___IF ALL BIRDS ARE DEAD___ */
    if (playersDead[0] && playersDead[1] && playersDead[2] && playersDead[3]) {
      drawLastFrame = true;
      menu = game = 0;
    }

    if (sound) {
      if (millis() - flapSoundTimeout > 100) {
        playingFlapSound = false;
      }
    }

    drawImage(CORNER, backgroundImg, 0, 0);

    /* ___DRAW ALL PIPES___ */
    drawPipes();

    /* ___FOR ALL PLAYERS___ */
    for (int i = 0; i < players.length; i++) {
      if (players[i]) {
        /* ___GET ELAPSTED TIME SINCE START TIME___ */
        elapsedTime = millis() - startTime;

        if (!playersDead[i]) {
          if (elapsedTime > getReadyTime) {
            /* ___ADD GRAVITY TO VERTICAL VELOCITY___ */
            playersYVelocity[i] += 1;
          } else {
            if (i == 0) { 
              /* ___GETTING READY TEXT WITH BLINKING ANIMATION___ */
              int blinkInterval = 100;
              boolean isVisible = (millis() / blinkInterval) % 2 == 0;
              if (isVisible) {
                strokeText("Get Ready", width/2, 200, mainColor, 0, 110, 4, textFont, CENTER, 255);
              }
            }
          }

          /*___UPDATE PLAYER VERTICAL VELOCITY___*/
          playersY[i] += playersYVelocity[i];
          
          /* ___ROTATE PLAYER BIRD___ */
          playersRotationAngle[i] = map(playersYVelocity[i], minYVertical, maxYVertical, minRotation, maxRotation);

          /* ___DRAW PLAYER BIRD___ */
          int opacity = 255;
          if (playersIsDying[i]) {
            opacity = 155;
          }
          drawPlayer(playersX[i], playersY[i], playersRotationAngle[i], playersImg[i], opacity);
          
          /* ___IF PLAYER TOUCHED GROUND___ */
          if (playersY[i] > groundColisionY) {
            /* ___IF PLAYER IS NOT ALREADY DYING___ */
            if (!playersIsDying[i]) {
              if (sound) {
                hitSound.play();
              }
              playersIsDying[i] = true;
            }
            playersDead[i] = true;
          }

          /* ___IF PLAYER TOUCHED CEILING___ */
          if (!playersIsDying[i]) {
            /* ___PLAYER 1 TOP COLLISION___ */
            if (playersY[i] < topColisionY) {
              playersIsDying[i] = true;
              if (sound) {
                hitSound.play();
              }
              playersYVelocity[i] += abs(playersYVelocity[i]); // Add vertical velocity to make a rebounce
            }
          }
        } else {
          /* ___IF PLAYER 1 IS DEAD___ */
          playersYVelocity[i] = 0;
          playersY[i] = groundColisionY;
          if (!(playersIsDying[0] && playersIsDying[1] && playersIsDying[2] && playersIsDying[3])) {
            playersX[i] -= 5;
          }
          drawPlayer(playersX[i], playersY[i], playersRotationAngle[i], playersImg[i], 155);
        }
        /* ___DRAW SCORE___ */
        if (elapsedTime > getReadyTime) {
          int opacity;
          if (difficulty == 4) {
            opacity = 255;
          } else if (difficulty == 6) {
            opacity = 235;
          } else {
            opacity = 200;
          }
          if (playersDead[i] || playersIsDying[i]) {
            opacity = 15;
          }
          strokeText(str(playersScore[i]), 100, playersScoreY[i], playersColor[i], 0, 80, 4, numbersFont, LEFT, opacity);
        }
      }
    }

    /* ___FOR ALL PIPES___ */
    for(int i = 0; i < pipesX.length; i++) {
      /* ___IF PIPE IS OUTSIDE SCREEN___ */
      if(pipesX[i] + (pipeTopImg.width / 2) < 0) {
        /* ___RESET PIPE SCORED___ */
        for (int j = 0; j < players.length; j++) {
          if (players[j]) {
            playersPipesScored[j][i] = false;
          }
        }

        /* ___RESET FIRST PIPE AFTER LAST PIPE ___ */
        if (i == 0) {
          pipesY[i] = pipeY();
          pipesX[i] = pipesX[pipesX.length - 1] + (pipesAppearWidth / difficulty);
        } else {
          pipesY[i] = pipeY();
          pipesX[i] = pipesX[i - 1] + (pipesAppearWidth / difficulty);
        }
      }

      /* ___FOR ALL PLAYERS INSIDE PIPE LOOP___ */
      for (int j = 0; j < players.length; j++) {
        if (players[j]) {
          /* ___ IF BIRDS PASSED THROUGH A PIPE ___ */
          if (playersX[j] > pipesX[i]) {
            /* ___ IF BIRD DID NOT PASSED THIS ONE ___ */
            if (!playersPipesScored[j][i]) {
              playersScore[j]++;
              if (sound) {
                scoreSound.play();
              }
              playersPipesScored[j][i] = true;
            }
          }
          /* ___IF PLAYER BIRD TOUCHED A PIPE ___ */
          if((abs(playersX[j] - pipesX[i]) < pipeTopImg.width - 20 && (abs(playersY[j] - pipesY[i]) > pipeGap-30))) {
            /* ___IF PLAYER BIRD TOUCHED INSIDE OF A PIPE ___ */
            if (abs(playersX[j] - pipesX[i]) < 70) {
              if (!playersIsDying[j]) {
                playersYVelocity[j] += abs(playersYVelocity[j]); // Add vertical velocity to make a rebounce
                if (sound) {
                  hitSound.play();
                }
              }
              playersIsDying[j] = true;                        
            } else {
              playersX[j] -= 10;  // Add horizontal velocity to make a rebounce
              if (!playersIsDying[j]) {
                if (sound) {
                  hitSound.play();
                }
                playersIsDying[j] = true;                        
              }
            }
          }
        }
      }
      /* ___MOVE PIPE ON X SO IT FOLLOWS GROUND___ */
      if (!(playersIsDying[0] && playersIsDying[1] && playersIsDying[2] && playersIsDying[3])) {
        if (elapsedTime > getReadyTime) {
          pipesX[i] -= 5;
        }
      }
    }
    
    /* ___DRAW GROUND___ */
    drawImage(CENTER, groundImg, groundX, height-groundImg.height/2);
    drawImage(CENTER, groundImg, groundX+groundImg.width, height-groundImg.height/2);

    /* ___IF BIRDS ARE NOT DYING MOVE GROUND___ */
    if (!(playersIsDying[0] && playersIsDying[1] && playersIsDying[2] && playersIsDying[3])) {
      groundX -= 5;

      /* ___IF GROUND X IS TOO LOW, RESET X___ */
      if (groundX < -width/2) {
        groundX += width/2;
      }
    }

    fill(255);
    textSize(40);
  
  } else {
    if (sound) {
      if (millis() - wooshSoundTimeout > 100) {
        playingWooshSound = false;
      }
    }

    if (menu == 1) {
      /* ___DRAW BACKGROUND___ */
      drawImage(CORNER, backgroundImg, 0, 0);

      /* ___DRAW GROUND___ */
      drawImage(CENTER, groundImg, groundX, height-groundImg.height/2);
      drawImage(CENTER, groundImg, groundX+groundImg.width, height-groundImg.height/2);

      /* ___MOVE GROUND___ */
      groundX -= 5;

      /* ___IF GROUND X IS TOO LOW, RESET X___ */
      if (groundX < -width/2) {
        groundX += width/2;
      }

      /* ___IF AT TITLE START___ */
      if (title == 1) {
        strokeText("FlappyMulti", width/2, height/2, mainColor, 0, 150, 4, textFont, CENTER, 255);
        int blinkInterval = 200;
        boolean isVisible = (millis() / blinkInterval) % 2 == 0;
        
        if (isVisible) {
          strokeText("Press anything to start", width/2, height/2+100, mainColor, 0, 50, 3, textFont, CENTER, 255);
        }
      } else {
        if (settings == 1) {
          strokeText("FlappyMulti", width/2, height/2-300, mainColor, 0, 150, 4, textFont, CENTER, 255);
          for (int i = 0; i < settingsButtonsCount; i++) {
            /*____IF BUTTON SELECTED____*/
            if (i == settingsSelectedButton) {
              if (i == 0) {
                /*____DRAW ARROWS____*/
                drawArrows(height/2-150);
                if (music) {
                  strokeImage(musicOnSelectedImg, width/2, height/2-150, 8);
                } else {
                  strokeImage(musicOffSelectedImg, width/2, height/2-150, 8);
                }
              } else if (i == 1) {
                /*____DRAW ARROWS____*/
                drawArrows(height/2);
                if (sound) {
                  strokeImage(soundOnSelectedImg, width/2, height/2, 8);
                } else {
                  strokeImage(soundOffSelectedImg, width/2, height/2, 8);
                }
              } else if (i == 2) {
                strokeImage(confirmSelectedImg, width/2, height/2+150, 8);
              }
            } else {
              if (i == 0) {
                if (music) {
                  strokeImage(musicOnImg, width/2, height/2-150, 8);
                } else {
                  strokeImage(musicOffImg, width/2, height/2-150, 8);
                }
              } else if (i == 1) {
                if (sound) {
                  strokeImage(soundOnImg, width/2, height/2, 8);
                } else {
                  strokeImage(soundOffImg, width/2, height/2, 8);
                }
              } else if (i == 2) {
                strokeImage(confirmImg, width/2, height/2+150, 8);
              }
            }
          }
        } else {
          strokeText("FlappyMulti", width/2, height/2-300, mainColor, 0, 150, 4, textFont, CENTER, 255);
          for (int i = 0; i < menuButtonsCount; i++) {
            /*____IF BUTTON SELECTED____*/
            if (i == menuSelectedButton) {
              if (i == 0) {
                strokeImage(settingsSelectedImg, width/2, height/2-150, 8);
              } else if (i == 1) {
                /*____DRAW ARROWS____*/
                drawArrows(height/2);

                /*____SELECT DIFFICULTY BUTTON____*/
                if (difficulty == 4) {
                  strokeImage(easySelectedImg, width/2, height/2, 8);
                  strokeImage(easyScreenImg, width/2+500, height/2, 8);
                } else if (difficulty == 6) {
                  strokeImage(mediumSelectedImg, width/2, height/2, 8);
                  strokeImage(mediumScreenImg, width/2+500, height/2, 8);
                } else {
                  strokeImage(hardSelectedImg, width/2, height/2, 8);
                  strokeImage(hardScreenImg, width/2+500, height/2, 8);
                }
              } else if (i == 2) {
                for (int j = 0; j < players.length; j++) {
                  int posX;
                  if (players[j]) {
                    if (j == 0 || j == 1) {
                      posX = width/2+500;
                    } else {
                      posX = width/2-500;
                    }
                    image(playersImg[j], posX, playersKeyY[j], 50, 35);
                    strokeText(playersKey[j], posX, playersKeyY[j]+60, mainColor, 0, 50, 3, textFont, CENTER, 255);
                  }
                }
                /*____DRAW ARROWS____*/
                drawArrows(height/2+150);
                
                /*____SELECT PLAYERS BUTTON____*/
                if (!players[1] && !players[2] && !players[3]) {
                  strokeImage(p1SelectedImg, width/2, height/2+150, 8);
                } else if (players[1] && !players[2] && !players[3]) {
                  strokeImage(p2SelectedImg, width/2, height/2+150, 8);
                } else if (players[1] && players[2] && !players[3]) {
                  strokeImage(p3SelectedImg, width/2, height/2+150, 8);
                } else {
                  strokeImage(p4SelectedImg, width/2, height/2+150, 8);
                }
              } else if (i == 3) {
                strokeImage(playSelectedImg, width/2, height/2+300, 8);
              }
            } else {
              if (i == 0) {
                strokeImage(settingsImg, width/2, height/2-150, 8);
              } else if (i == 1) {
                if (difficulty == 4) {
                  strokeImage(easyImg, width/2, height/2, 8);
                } else if (difficulty == 6) {
                  strokeImage(mediumImg, width/2, height/2, 8);
                } else {
                  strokeImage(hardImg, width/2, height/2, 8);
                }
              } else if (i == 2) {
                /*____SELECT PLAYERS BUTTON____*/
                if (!players[1] && !players[2] && !players[3]) {
                  strokeImage(p1Img, width/2, height/2+150, 8);
                } else if (players[1] && !players[2] && !players[3]) {
                  strokeImage(p2Img, width/2, height/2+150, 8);
                } else if (players[1] && players[2] && !players[3]) {
                  strokeImage(p3Img, width/2, height/2+150, 8);
                } else {
                  strokeImage(p4Img, width/2, height/2+150, 8);
                }
              } else if (i == 3) {
                strokeImage(playImg, width/2, height/2+300, 8);
              }
            }
          }
        }
      }
    } else {
      /*____IF JUST DIED DRAW LAST FRAME____*/
      if (drawLastFrame) {
        //Reuse of starttime to make the text appear after 500ms
        startTime = millis(); 
        /* ___DRAW BACKGROUND___ */
        drawImage(CORNER, backgroundImg, 0, 0);

        drawLastFrame = false;
        /* ___ALL PIPES___ */
        drawPipes();
                
        /* ___DRAW PLAYERS___ */
        for (int i = 0; i < players.length; i++) {
          if (players[i]) {
            drawPlayer(playersX[i], playersY[i], playersRotationAngle[i], playersImg[i], 155);
          }
        }
      }

      /* ___DRAW GROUND___ */
      drawImage(CENTER, groundImg, groundX, height-groundImg.height/2);
      drawImage(CENTER, groundImg, groundX+groundImg.width, height-groundImg.height/2);

      elapsedTime = millis() - startTime;
      textOpacity = elapsedTime * 255 / 500;
            
      strokeText("Game Over", width/2, height/2-200, mainColor, 0, 120, 4, textFont, CENTER, textOpacity);
            
      /* ___IF ELAPSED TIME IS HIGHER THAN 250 MS___ */
      if (elapsedTime < 300 && 250 < elapsedTime) {
        /* ___DRAW SCOREBOARD___ */
        drawImage(CENTER, scoreImg, width/2, height/2);

        /* ___DRAW SCORES___ */
        for (int i = 0; i < players.length; i++) {
          if (players[i]) {
            strokeText(str(playersScore[i]), playersScoreboardX[i], playersScoreboardY[i], playersColor[i], 0, 50, 3, numbersFont, CENTER, 255);
          }
        }
                
        /* ___PRINT HIGHSCORE IN FUNCTION OF DIFFICULTY___ */      
        if (difficulty == 4) {
          easyHighscore = printHighscore(easyHighscore);
        } else if (difficulty == 6) {
          mediumHighscore = printHighscore(mediumHighscore);
        } else {
          hardHighscore = printHighscore(hardHighscore);
        }
      }
      /* ___IF ELAPSED TIME IS HIGHER THAN 500 MS___ */
      if (elapsedTime > 500) {
        /* ___DRAW RESTART AND HOME BUTTONS___ */
        for (int i = 0; i < gameOverButtonsCount; i++) {
          if (i == gameOverSelectedButton) {
            if (i == 0) {
              strokeImage(restartSelectedImg, width/2-120, height/2+300, 8);
            } else {
              strokeImage(menuSelectedImg, width/2+120, height/2+300, 8);
            }
          } else {
            if (i == 0) {
              strokeImage(restartImg, width/2-120, height/2+300, 8);
            } else {
              strokeImage(menuImg, width/2+120, height/2+300, 8);
            }
          }
        }
      }
    }
  }
}

/* ___MOUSE CLICKED___ */
void mousePressed() {
  if(game == 1) {
    if (elapsedTime > getReadyTime) {
      /* ___IF BIRD IS NOT DYING___ */
      if (mouseButton == LEFT) {
        if (!playersIsDying[0]) {
          playersYVelocity[0] = -15;
          if (sound) {
            if (!playingFlapSound) {
              flapSound.play();
              flapSoundTimeout = millis();
              playingFlapSound = true;
            }
          }
        }
      } else {
        if (!playersIsDying[1]) {
          playersYVelocity[1] = -15;
          if (sound) {
            if (!playingFlapSound) {
              flapSound.play();
              flapSoundTimeout = millis();
              playingFlapSound = true;
            }
          }
        }
      }
    }
  } else {
    if (sound) {
      if (!playingWooshSound) {
        wooshSound.play();
        wooshSoundTimeout = millis();
        playingWooshSound = true;
      }
    }
    if (menu == 1) {
      if (title == 1) {
        title = 0;
      } else {
        if (settings == 1) {
          if (settingsSelectedButton == 0) {
            if (music) {
              music = false;
              playingTheme = false;
              themeSound.stop();
            } else {
              music = true;
              themeSound.loop();
              playingTheme = true;
            }
          } else if (settingsSelectedButton == 1) {
            if (sound) {
              sound = false;
            } else {
              sound = true;
            }
          } else {
            settings = 0;
          }
        } else {
          if (menuSelectedButton == 0) {
            settings = 1;
          } else if (menuSelectedButton == 1) {
            if (difficulty == 4) {
              difficulty = 6;
            } else if (difficulty == 6) {
              difficulty = 8;
            } else {
              difficulty = 4;
            }
            setupDifficultyImages();
          } else if (menuSelectedButton == 2) {
            if (!players[1] && !players[2] && !players[3]) {
              players[1] = true;
              players[2] = false;
              players[3] = false;
            } else if (players[1] && !players[2] && !players[3]) {
              players[1] = true;
              players[2] = true;
              players[3] = false;
            } else if (players[1] && players[2] && !players[3]) {
              players[1] = true;
              players[2] = true;
              players[3] = true;
            } else {
              players[1] = false;
              players[2] = false;
              players[3] = false;
            }
          } else if (menuSelectedButton == 3) {
            menu = 0;
            play();
          }
        }
      }
    } else {
      if (gameOverSelectedButton == 0) {
        play();
      } else {
        menu = 1;
      }
    }
  }
}
/* ___SPACE BAR CLICKED___ */
void keyPressed() {
  if (keyCode == ESC) {
    exitGame();
  }
  if(game == 1) {
    if (elapsedTime > getReadyTime) {
      /* ___IF UP ARROW PRESSED AND BIRDS ARE NOT DYING___ */
      if (keyCode == UP) {
        if (!playersIsDying[2]) {
          playersYVelocity[2] = -15;
          if (sound) {
            if (!playingFlapSound) {
              flapSound.play();
              flapSoundTimeout = millis();
              playingFlapSound = true;
            }
          }
        }
      }
      if (key == 'z') {
          if (!playersIsDying[3]) {
            playersYVelocity[3] = -15;
            if (sound) {
              if (!playingFlapSound) {
                flapSound.play();
                flapSoundTimeout = millis();
                playingFlapSound = true;
              }
            }
          }
      }
    }
  } else {
    if (sound) {
      if (key == 'z' || keyCode == LEFT || keyCode == RIGHT || keyCode == UP || keyCode == DOWN) {
        if (!playingWooshSound) {
          wooshSound.play();
          wooshSoundTimeout = millis();
          playingWooshSound = true;
        }
      }
    }
    if (menu == 1) {
      if (title == 1) {
        title = 0;
      } else {
        if (settings == 1) {
          if (keyCode == UP) {
            settingsSelectedButton = (settingsSelectedButton - 1 + settingsButtonsCount) % settingsButtonsCount;
          } else if (keyCode == DOWN) {
            settingsSelectedButton = (settingsSelectedButton + 1) % settingsButtonsCount; 
          } else if (key == 'z' || keyCode == LEFT || keyCode == RIGHT) {
            if (settingsSelectedButton == 0) {
              if (music) {
                music = false;
                playingTheme = false;
                themeSound.stop();
              } else {
                music = true;
                themeSound.loop();
                playingTheme = true;
              }
            } else if (settingsSelectedButton == 1) {
              if (sound) {
                sound = false;
              } else {
                sound = true;
              }
            } else {
              settings = 0;
            }
          }
        } else {
          if (keyCode == UP) {
            menuSelectedButton = (menuSelectedButton - 1 + menuButtonsCount) % menuButtonsCount;
          } else if (keyCode == DOWN) {
            menuSelectedButton = (menuSelectedButton + 1) % menuButtonsCount; 
          } else if (key == 'z' || keyCode == LEFT || keyCode == RIGHT) {
            if (menuSelectedButton == 0) {
              settings = 1;
            } else if (menuSelectedButton == 1) {
              if (difficulty == 4) {
                if (keyCode == RIGHT) {
                  difficulty = 6;
                } else {
                  difficulty = 8;
                }
              } else if (difficulty == 6) {
                if (keyCode == RIGHT) {
                  difficulty = 8;
                } else {
                  difficulty = 4;
                }
              } else {
                if (keyCode == RIGHT) {
                  difficulty = 4;
                } else {
                  difficulty = 6;
                }
              }
              setupDifficultyImages();
            } else if (menuSelectedButton == 2) {
              if (keyCode == RIGHT || key == 'z') {
                if (!players[1] && !players[2] && !players[3]) {
                  players[1] = true;
                  players[2] = false;
                  players[3] = false;
                } else if (players[1] && !players[2] && !players[3]) {
                  players[1] = true;
                  players[2] = true;
                  players[3] = false;
                } else if (players[1] && players[2] && !players[3]) {
                  players[1] = true;
                  players[2] = true;
                  players[3] = true;
                } else {
                  players[1] = false;
                  players[2] = false;
                  players[3] = false;
                }
              } else if (keyCode == LEFT) {
                if (!players[1] && !players[2] && !players[3]) {
                  players[1] = true;
                  players[2] = true;
                  players[3] = true;
                } else if (players[1] && !players[2] && !players[3]) {
                  players[1] = false;
                  players[2] = false;
                  players[3] = false;
                } else if (players[1] && players[2] && !players[3]) {
                  players[1] = true;
                  players[2] = false;
                  players[3] = false;
                } else {
                  players[1] = true;
                  players[2] = true;
                  players[3] = false;
                }
              }
            } else if (menuSelectedButton == 3) {
              menu = 0;
              play();
            }
          }
        }
      }
    } else {
      if (keyCode == RIGHT) {
        gameOverSelectedButton = (gameOverSelectedButton - 1 + gameOverButtonsCount) % gameOverButtonsCount;
      } else if (keyCode == LEFT) {
        gameOverSelectedButton = (gameOverSelectedButton + 1) % gameOverButtonsCount; 
      } else if (key == 'z') {
        if (gameOverSelectedButton == 0) {
          play();
        } else {
          menu = 1;
        }
      }
    }
  
  }
}


/* ___PLAY GAME___ */
void play() {
 for (int i = 0; i < players.length; i++) {
    if (players[i]) {
      playersDead[i] = false;
      playersIsDying[i] = false;
      playersYVelocity[i] = 0;
      playersScore[i] = 0;
      playersDeadX[i] = 0;
    } else {
      playersDead[i] = true;
      playersIsDying[i] = true;
    }
  }
  if (!players[1] && !players[2] && !players[3]) {
    playersX[0] = width / 2;
    playersY[0] = height/3;
  } else if (players[1] && !players[2] && !players[3]) {
    playersX[0] = width / 2 + 50;
    playersX[1] = width / 2 - 50;
    playersY[0] = playersY[1] = height/3;
  } else if (players[1] && players[2] && !players[3]) {
    playersX[0] = width / 2 + 100;
    playersX[1] = width / 2;
    playersX[2] = width / 2 - 100;
    playersY[0] = height/3;
    playersY[1] = height/3 - 40;
    playersY[2] = height/3;
  } else {
    playersX[0] = width / 2 + 150;
    playersX[1] = width / 2 + 50;
    playersX[2] = width / 2 - 50;
    playersX[3] = width / 2 - 150;

    playersY[0] = height/3 + 40;
    playersY[1] = height/3;
    playersY[2] = height/3 + 40;
    playersY[3] = height/3;
  }

  playersPipesScored = new boolean[4][difficulty];
  nextPipeIsHigh = random(1) > 0.5;

  showText = true;

  if (difficulty == 8) {
    pipeGap = 145;
  } else if (difficulty == 6) {
    pipeGap = 135;
  } else {
    pipeGap = 160;
  }

  pipesX = new int[difficulty];
  pipesY = new int[difficulty];

  nextPipeIsHigh = random(1) > 0.5;
  resetPipes();
  groundX = -200;
  menu = 0;
  game = 1;
  startTime = millis();
}

/* ___EXIT GAME WHEN PRESSING ESC___ */
void exitGame() {
  println("Saving highscores...");
  saveHighscores();
  exit();
}

/* ________________________________HIGHSCORES FUNCTIONS___________________ */
                                
/*________________________________________________________________________ */

/* ___PRINT HIGHSCORE ON SCOREBOARD___ */
int printHighscore(int highscore) {
  strokeText(str(highscore), width/2+210, height/2+75, mainColor, 0, 70, 3, numbersFont, CENTER, 255);
  for (int i = 0; i < players.length; i++) {
    if (players[i]) {
      if (playersScore[i] > highscore || millis() - highscoreTimeout < 1000) {
        if (playersScore[i] > highscore) {
          highscore = playersScore[i];
          highscoreColor = playersColor[i];
          highscoreTimeout = millis();
        }
        strokeText("NEW HIGHSCORE", width/2+65, height/2+65, mainColor, 0, 50, 2, textFont, CENTER, 255);
        strokeText(str(highscore), width/2+210, height/2+75, highscoreColor, 0, 70, 3, numbersFont, CENTER, 255);
      } 
    }
  }
  return highscore;
}
/* ___SAVE HIGHSCORE IN HIGHSCORES.TXT___ */
void saveHighscores() {
 highscores[0] = str(easyHighscore);
 highscores[1] = str(mediumHighscore);
 highscores[2] = str(hardHighscore);
 saveStrings("highscores.txt", highscores);
}

/* ________________________________LOAD FUNCTIONS___________________ */
                                
/*________________________________________________________________________ */

/* ___SETUP IMAGES IN FUNCTION OF DIFFICULTY___ */
void setupDifficultyImages() {
  if (difficulty == 8) {
    backgroundImg = backgroundHardImg;
    groundImg = groundHardImg;
    pipeTopImg = pipeTopHardImg;
    pipeBottomImg = pipeBottomHardImg;
  } else if (difficulty == 6) {
    backgroundImg = backgroundMediumImg;
    groundImg = groundMediumImg;
    pipeTopImg = pipeTopMediumImg;
    pipeBottomImg = pipeBottomMediumImg;
  } else {
    backgroundImg = backgroundEasyImg;
    groundImg = groundEasyImg;
    pipeTopImg = pipeTopEasyImg;
    pipeBottomImg = pipeBottomEasyImg;
  }
}

/* ___LOAD IMAGES___ */
void loadImages() {
    for (int i = 0; i < playersImg.length; i++) {
        playersImg[i] = loadImage("assets/images/player_" + (i+1) + ".png");
    }

    groundEasyImg = loadImage("assets/images/ground_easy.png");
    groundMediumImg = loadImage("assets/images/ground_medium.png");
    groundHardImg = loadImage("assets/images/ground_hard.png");

    pipeTopEasyImg = loadImage("assets/images/pipe_top_easy.png");
    pipeBottomEasyImg = loadImage("assets/images/pipe_bottom_easy.png");
    pipeTopMediumImg = loadImage("assets/images/pipe_top_medium.png");
    pipeBottomMediumImg = loadImage("assets/images/pipe_bottom_medium.png");
    pipeTopHardImg = loadImage("assets/images/pipe_top_hard.png");
    pipeBottomHardImg = loadImage("assets/images/pipe_bottom_hard.png");

    backgroundEasyImg = loadImage("assets/images/background_easy.png");
    backgroundMediumImg = loadImage("assets/images/background_medium.png");
    backgroundHardImg = loadImage("assets/images/background_hard.png");

    scoreImg = loadImage("assets/images/score.png");
    restartImg = loadImage("assets/images/restart.png");
    restartSelectedImg = loadImage("assets/images/restart_selected.png");
    menuImg = loadImage("assets/images/menu.png");
    menuSelectedImg = loadImage("assets/images/menu_selected.png");
    soundOnImg = loadImage("assets/images/sound_on.png");
    soundOffImg = loadImage("assets/images/sound_off.png");
    soundOnSelectedImg = loadImage("assets/images/sound_on_selected.png");
    soundOffSelectedImg = loadImage("assets/images/sound_off_selected.png");
    playImg = loadImage("assets/images/play.png");
    playSelectedImg = loadImage("assets/images/play_selected.png");
    easyImg = loadImage("assets/images/easy.png");
    easySelectedImg = loadImage("assets/images/easy_selected.png");
    mediumImg = loadImage("assets/images/medium.png");
    mediumSelectedImg = loadImage("assets/images/medium_selected.png");
    hardImg = loadImage("assets/images/hard.png");
    hardSelectedImg = loadImage("assets/images/hard_selected.png");
    leftArrowImg = loadImage("assets/images/left_arrow.png");
    rightArrowImg = loadImage("assets/images/right_arrow.png");
    musicOnImg = loadImage("assets/images/music_on.png");
    musicOffImg = loadImage("assets/images/music_off.png");
    musicOnSelectedImg = loadImage("assets/images/music_on_selected.png");
    musicOffSelectedImg = loadImage("assets/images/music_off_selected.png");
    settingsImg = loadImage("assets/images/settings.png");
    settingsSelectedImg = loadImage("assets/images/settings_selected.png");
    confirmImg = loadImage("assets/images/confirm.png");
    confirmSelectedImg = loadImage("assets/images/confirm_selected.png");

    p1Img = loadImage("assets/images/1_player.png");
    p2Img = loadImage("assets/images/2_players.png");
    p3Img = loadImage("assets/images/3_players.png");
    p4Img = loadImage("assets/images/4_players.png");
    p1SelectedImg = loadImage("assets/images/1_player_selected.png");
    p2SelectedImg = loadImage("assets/images/2_players_selected.png");
    p3SelectedImg = loadImage("assets/images/3_players_selected.png");
    p4SelectedImg = loadImage("assets/images/4_players_selected.png");

    easyScreenImg = loadImage("assets/images/easy_screen.png");
    mediumScreenImg = loadImage("assets/images/medium_screen.png");
    hardScreenImg = loadImage("assets/images/hard_screen.png");
}

/* ___LOAD SOUNDS___ */
void loadSounds() {
    themeSound = new SoundFile(this, "assets/sounds/theme.wav");
    flapSound = new SoundFile(this, "assets/sounds/flap.wav");
    hitSound = new SoundFile(this, "assets/sounds/hit.wav");
    scoreSound = new SoundFile(this, "assets/sounds/score.wav");
    wooshSound = new SoundFile(this, "assets/sounds/woosh.wav");
}

/* ________________________________PIPE POSITIONS FUNCTIONS___________________ */
                                
/*________________________________________________________________________ */

/* ___ RESET PIPES BEFORE A GAME ___ */
void resetPipes() {
  /* ___REPLACE ALL PIPES___ */
  for(int i = 0; i < pipesX.length; i++) {
    pipesX[i] = pipesAppearWidth + i * (pipesAppearWidth / difficulty);
    pipesY[i] = pipeY();

    playersPipesScored[0][i] = false;
    playersPipesScored[1][i] = false;
    playersPipesScored[2][i] = false;
    playersPipesScored[3][i] = false;
  }
}

/* ___GENERATE RANDOM PIPE Y POSITION___ */
int pipeY() {
  int minY, maxY;
  
  if (difficulty == 4) {
    return (int)random(pipeGap*2, height - pipeGap*2 - pipeGroundGap);
  } else {
    
    if (nextPipeIsHigh) {
      nextPipeIsHigh = false;
      minY = pipeGroundGap * 6;
      maxY = pipeGroundGap * 8;
    } else {
      nextPipeIsHigh = true;
      minY = height - pipeGroundGap * 10;
      maxY = height - pipeGroundGap * 8;
    }
    
    return (int)random(minY, maxY);
  }
}

/* ________________________________DRAW AND STROKE FUNCTIONS______________ */
                                
/*________________________________________________________________________ */

/* ___ DRAW IMAGE ___ */
void drawImage(int MODE, PImage image, int x, int y) {
  imageMode(MODE);
  image(image, x, y);
}

/* ___ DRAW ARROWS IMAGES ___ */
void drawArrows(int y) {
  imageMode(CENTER);
  image(leftArrowImg, width/2-150, y);
  image(rightArrowImg, width/2+150, y);
}

/* ___ DRAW PLAYER ___ */
void drawPlayer(int playerX, int playerY, float playerRotationAngle, PImage playerImg, int opacity) {
  tint(255, opacity);
  pushMatrix(); // Save the current transformation matrix
  translate(playerX, playerY);
  rotate(playerRotationAngle);
  image(playerImg, 0, 0);
  popMatrix(); // Restore the previous transformation matrix
  tint(255, 255);
}

/* ___ DRAW ALL PIPES ___ */
void drawPipes() {
  for(int i = 0; i < pipesX.length; i++) {
    imageMode(CENTER);
    image(pipeTopImg, pipesX[i], pipesY[i] - (pipeTopImg.height/2+pipeGap));
    image(pipeBottomImg, pipesX[i], pipesY[i] + (pipeBottomImg.height/2+pipeGap));
  }
}

/*___DRAW IMAGE WITH A STROKE*/
void strokeImage(PImage img, int x, int y, int borderThickness) {
  fill(82, 55, 70);
  rectMode(CENTER);
  rect(x - borderThickness/6 , y - borderThickness/6, img.width + borderThickness, img.height + borderThickness, 15);
  drawImage(CENTER, img, x, y);
}

/*___DRAW TEXT WITH A STROKE*/
void strokeText(String message, int x, int y, color fillColor, color strokeColor, int size, int strokeSize, PFont font, int align, float opacity) {
  textFont(font);
  textAlign(align);
  textSize(size);
  fill(strokeColor, opacity);
  text(message, x-strokeSize, y);
  text(message, x, y-strokeSize);
  text(message, x+strokeSize, y);
  text(message, x+strokeSize*2, y+strokeSize*2);
  text(message, x, y+strokeSize);
  fill(fillColor, opacity);
  text(message, x, y);
}